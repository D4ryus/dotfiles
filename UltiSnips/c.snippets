snippet c
/*
 * ${VISUAL}$0
 */
endsnippet

snippet mainn
int main(int argc, const char *argv[])
{
	$0
	return 0;
}
endsnippet

snippet main
int main()
{
	$0
	return 0;
}
endsnippet

snippet inc
#include <$1.h>
$0
endsnippet

snippet Inc
#include "$1.h"
$0
endsnippet

snippet guard "header guard" b
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s_H' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

$0

#endif /* end of include guard: $1 */
endsnippet

snippet if
if ($1)
{
	${VISUAL}$2
}$0
endsnippet

snippet else
else
{
	${VISUAL}$1
}$0
endsnippet

snippet t
$1 ? $2 : $0;
endsnippet

snippet do
do
{
	${VISUAL}$0
} while ($1);
endsnippet

snippet while
while ($1)
{
	${VISUAL}$0
}
endsnippet

snippet for
for (${1:i} = ${2:0}; $1 < ${3:count}; $1${4:++})
{
	${VISUAL}${0:/* code */}
}
endsnippet

snippet forr
int ${1:i};
for ($1 = ${2:0}; $1 < ${3:count}; $1${4:++})
{
	${VISUAL}${0:/* code */}
}
endsnippet

snippet fun
${1:int}
$2($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund
${1:void} $2($3);$0
endsnippet

snippet td
typedef $1 $2;$0
endsnippet

snippet struct
typedef struct ${2:_$1}
{
	$0
} $1};
endsnippet

snippet enum
typedef enum
{
	$1
} $2;
$0
endsnippet

snippet printf
printf("$1\n"$2);$0
endsnippet
